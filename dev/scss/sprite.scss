/*
SCSS variables are information about icon's compiled state, stored under its original file name

.icon-home {
  width: $icon-home-width;
}

The large array-like variables contain all information about a single icon
$icon-home: x y offset_x offset_y width height total_width total_height image_path;

At the bottom of this section, we provide information about the spritesheet itself
$spritesheet: width height image $spritesheet-sprites;
*/
$course-name: 'course';
$course-x: 0px;
$course-y: 33px;
$course-offset-x: 0px;
$course-offset-y: -33px;
$course-width: 26px;
$course-height: 32px;
$course-total-width: 41px;
$course-total-height: 109px;
$course-image: 'sprite.png';
$course: (0px, 33px, 0px, -33px, 26px, 32px, 41px, 109px, 'sprite.png', 'course', );
$education-name: 'education';
$education-x: 0px;
$education-y: 0px;
$education-offset-x: 0px;
$education-offset-y: 0px;
$education-width: 41px;
$education-height: 23px;
$education-total-width: 41px;
$education-total-height: 109px;
$education-image: 'sprite.png';
$education: (0px, 0px, 0px, 0px, 41px, 23px, 41px, 109px, 'sprite.png', 'education', );
$work-name: 'work';
$work-x: 0px;
$work-y: 75px;
$work-offset-x: 0px;
$work-offset-y: -75px;
$work-width: 36px;
$work-height: 34px;
$work-total-width: 41px;
$work-total-height: 109px;
$work-image: 'sprite.png';
$work: (0px, 75px, 0px, -75px, 36px, 34px, 41px, 109px, 'sprite.png', 'work', );
$spritesheet-width: 41px;
$spritesheet-height: 109px;
$spritesheet-image: 'sprite.png';
$spritesheet-sprites: ($course, $education, $work, );
$spritesheet: (41px, 109px, 'sprite.png', $spritesheet-sprites, );

/*
The provided mixins are intended to be used with the array-like variables

.icon-home {
  @include sprite-width($icon-home);
}

.icon-email {
  @include sprite($icon-email);
}

Here are example usages in HTML:

`display: block` sprite:
<div class="icon-home"></div>

`display: inline-block` sprite:
<img class="icon-home" />
*/
@mixin sprite-width($sprite) {
  width: nth($sprite, 5);
}

@mixin sprite-height($sprite) {
  height: nth($sprite, 6);
}

@mixin sprite-position($sprite) {
  $sprite-offset-x: nth($sprite, 3);
  $sprite-offset-y: nth($sprite, 4);
  background-position: $sprite-offset-x  $sprite-offset-y;
}

@mixin sprite-image($sprite) {
  $sprite-image: nth($sprite, 9);
  background-image: url(#{$sprite-image});
}

@mixin sprite($sprite) {
  @include sprite-image($sprite);
  @include sprite-position($sprite);
  @include sprite-width($sprite);
  @include sprite-height($sprite);
}

/*
The `sprites` mixin generates identical output to the CSS template
  but can be overridden inside of SCSS

@include sprites($spritesheet-sprites);
*/
@mixin sprites($sprites) {
  @each $sprite in $sprites {
    $sprite-name: nth($sprite, 10);
    .#{$sprite-name} {
      @include sprite($sprite);
    }
  }
}
